openapi: 3.0.0
info:
  title: OCR API
  description: API for managing OCR apps
  version: 1.0.0

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://localhost

tags:
  - name: Authentication
    description: Operations related to user authentication

paths:
  /api/auth/signup:
    post:
      tags:
        - Authentication
      summary: Sign up a new user
      description: >
        This endpoint adds a new user signup request. If the registration number or email is already registered,
        it returns an appropriate message. If a signup request already exists for the registration number or email,
        it returns a message indicating that. Otherwise, it creates a new signup request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/SignupSuccess"
                  - $ref: "#/components/schemas/SignupExists"
        "401":
          description: Registration number or email is already registered
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RegNoError"
                  - $ref: "#/components/schemas/EmailError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/auth/verify:
    post:
      tags:
        - Authentication
      summary: Verify a user
      description: >
        This endpoint verifies a user signup request. If the request is valid, it sends an email to the user.
        If the request is not found, it returns an error message.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"

      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccess"

        "400":
          description: User is not registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotRegisteredError"

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/auth/refreshToken:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: >
        This endpoint refreshes the access token using a provided refresh token.
      responses:
        "200":
          description: >
            Refresh token successful.
            Note: Although a 200 status code is not explicitly set in the code, this response is implied for successful refresh token operations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenSuccess"
        "400":
          description: Token is required or an error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenError"

  /api/auth/revokeToken:
    post:
      tags:
        - Authentication
      summary: Revoke a token
      description: >
        This endpoint revokes an access or refresh token. The token can be provided in the request body or in cookies.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RevokeTokenRequest"
      responses:
        "200":
          description: >
            Token revoked successfully.
            Note: Although a 200 status code is not explicitly set in the code, this response is implied for successful revocation operations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevokeTokenSuccess"
        "400":
          description: Token is required or an error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevokeTokenError"
        "403":
          description: User is not authorized to revoke this token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"


components:
  schemas:
    LoginRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: Email address
          example: johndoe@example.com
        password:
          type: string
          description: Password
          example: "yourpassword"

    SignupRequest:
      type: object
      required:
        - reg_no
        - username
        - email
      properties:
        reg_no:
          type: string
          description: Registration number
          example: ABC123
        username:
          type: string
          description: Username
          example: johndoe
        email:
          type: string
          description: Email address
          example: johndoe@example.com
        hospital:
          type: string
          description: Name of the hospital
          example: General Hospital
        designation:
          type: string
          description: Designation of the user
          example: Doctor
        contact_no:
          type: string
          description: Contact number
          example: "+1234567890"

    SignupSuccess:
      type: object
      properties:
        reg_no:
          type: string
          description: Registration number
        username:
          type: string
          description: Username
        email:
          type: string
          description: Email address
        hospital:
          type: string
          description: Name of the hospital
        designation:
          type: string
          description: Designation of the user
        contact_no:
          type: string
          description: Contact number
        message:
          type: string
          description: Success message
          example: "Request is sent successfully. You will receive an Email on acceptance."

    SignupExists:
      type: object
      properties:
        message:
          type: string
          description: Message indicating an existing request
          example: "A request for registration already exists."

    RegNoError:
      type: object
      properties:
        message:
          type: string
          description: Error message for registered registration number
          example: "The Reg No is already registered"

    EmailError:
      type: object
      properties:
        message:
          type: string
          description: Error message for registered email address
          example: "Email address is already registered"

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: "Internal Server Error!"
        error:
          type: string
          description: Detailed error information
          example: "Detailed error information here."

    LoginSuccess:
      type: object
      properties:
        accessToken:
          type: object
          properties:
            token:
              type: string
              description: Access token
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expiry:
              type: string
              description: Token expiry time
              example: "1h"
        ref:
          type: object
          description: User reference details
          properties:
            _id:
              type: string
              description: User ID
              example: "60b6b3b8f9c0c40015c10f5a"
            email:
              type: string
              description: User's email address
              example: "johndoe@example.com"
            username:
              type: string
              description: Username
              example: "johndoe"
            role:
              type: string
              description: User's role
              example: "admin"
        others:
          type: object
          description: Additional details
          properties:
            message:
              type: string
              description: Success message
              example: "Successfully logged in"
            permissions:
              type: array
              items:
                type: string
              description: List of user permissions
              example: ["read", "write", "delete"]
      

    UserNotRegisteredError:
      type: object
      properties:
        message:
          type: string
          description: Error message indicating the user is not registered
          example: "User is not registered!"

          

    RefreshTokenSuccess:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
          example: true
        message:
          type: string
          description: Success message
          example: "Refresh token successful"
        ref:
          type: object
          description: User reference details
          properties:
            _id:
              type: string
              description: User ID
              example: "60b6b3b8f9c0c40015c10f5a"
            email:
              type: string
              description: User's email address
              example: "johndoe@example.com"
            username:
              type: string
              description: Username
              example: "johndoe"
            role:
              type: string
              description: User's role
              example: "admin"
        permissions:
          type: array
          items:
            type: string
          description: List of user permissions
          example: ["read", "write", "delete"]
        accessToken:
          type: object
          properties:
            token:
              type: string
              description: Access token
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expiry:
              type: string
              description: Token expiry time
              example: "1h"

    RefreshTokenError:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
          example: false
        message:
          type: string
          description: Error message
          example: "Token is required"
        error:
          type: string
          description: Detailed error information
          example: "Detailed error information here."

    RevokeTokenRequest:
      type: object
      properties:
        accessToken:
          type: string
          description: Access token to revoke
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    RevokeTokenSuccess:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
          example: true
        message:
          type: string
          description: Success message
          example: "Token revoked"

    RevokeTokenError:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
          example: false
        message:
          type: string
          description: Error message
          example: "Token is required"

    UnauthorizedError:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
          example: false
        message:
          type: string
          description: Error message
          example: "You are not authorized to revoke this token"

        
